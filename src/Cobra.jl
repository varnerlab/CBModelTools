# --- PRIVATE METHODS ---------------------------------------------------------- #
function is_kegg_organism_code_ok(kegg_organism_code::String)
end

function is_cobra_dictionary_ok(cobra_dictionary::Dict{String,Any})
end

function lookup_gene_ec_mapping_record(kegg_gene_id::String)::Union{Set{String},Nothing}

    # initialize -
    record_set = Set{String}()

    # call the KEGG API to get the ec number -
    list_of_ec_numbers = get_ec_number_for_gene(kegg_gene_id)
    if list_of_ec_numbers != nothing

        # create a record, add to the mapping buffer -
        for ec_number in list_of_ec_numbers
            push!(record_set,ec_number)
        end

        # return -
        return record_set
    end

    return nothing
end

function build_mapping_dictionary(path_to_mapping_file::String)::Dict{String,Mapping}

    # check the file -
    is_file_path_ok(path_to_mapping_file)

    # initalize -
    mapping_dictionary = Dict{String,Mapping}()

    # ok, read -
    file_record_array = read_file_from_path(path_to_mapping_file)

    # process the record -
    for record in file_record_array

        # ignore comments -
        if (occursin("//",record) == false)

            # create map entry -
            mapping = Mapping()

            # create set -
            token_set = Set{String}()

            # record -
            token_array = split(record,"=")

            # the key is the first entry -
            key = token_array[1]
            mapping.key = key

            # push the tokens (genes, ecnumbers etc) into set -
            token_array = split(token_array[2],",")
            for token in token_array

                # grab -
                push!(token_set,token)
            end

            # set the value -
            mapping.value = token_set

            # add entry to dictionary -
            mapping_dictionary[key] = mapping
        end
    end

    # return -
    return mapping_dictionary
end
# ------------------------------------------------------------------------------ #

# --- PUBLIC METHODS ----------------------------------------------------------- #
function load_cobra_model_file(path_to_cobra_mat_file::String, model_name::String)::Dict{String,Any}

    # check file ok?
    is_file_path_ok(path_to_cobra_mat_file)

    # open the cobra file -
    file = matopen(path_to_cobra_mat_file)
    cobra_dictionary = read(file,model_name)
    close(file)

    # return -
    return cobra_dictionary
end

function write_cobra_model_file(path_to_cobra_mat_file::String,cobra_dictionary::Dict{String,Any})
end

function generate_cobra_dictionary_from_vff(path_to_vff_file::String)::Dict{String,Any}

    # check the path -
    is_file_path_ok(path_to_vff_file)

    # initialize -
    cobra_dictionary = Dict{String,Any}()

    # cobra dictionary has some required fields, and optional fields:
    # rxns = reaction tags -

end

function export_gene_order_file(cobra_dictionary::Dict{String,Any}, kegg_organism_code::String, path_to_mapping_file::String)

    # Check organism code -
    is_kegg_organism_code_ok(kegg_organism_code)

    # Check the dictionary -
    is_cobra_dictionary_ok(cobra_dictionary)

    # initalize -
    mapping_buffer = String[]
    list_of_genes = cobra_dictionary["genes"]

    # process each gene -
    for gene_id in list_of_genes

        # make the KEGG gene id -
        kegg_gene_id = "$(kegg_organism_code):$(gene_id)"

        # cache -
        +(mapping_buffer, kegg_gene_id)
    end

    # Write out the vff file -
    open("$(path_to_mapping_file)", "w") do f

        for line_item in mapping_buffer
            write(f,"$(line_item)\n")
        end
    end
end

function export_reaction_tag_to_gene_mapping_file(cobra_dictionary::Dict{String,Any}, kegg_organism_code::String, path_to_mapping_file::String)

    # Check organism code -
    is_kegg_organism_code_ok(kegg_organism_code)

    # Check the dictionary -
    is_cobra_dictionary_ok(cobra_dictionary)

    # initalize -
    mapping_buffer = String[]

    # add header text to mapping file -
    filename = splitdir(path_to_mapping_file)[2]
    +(mapping_buffer,"// --------------------------------------------------------- //")
    +(mapping_buffer,"// $(filename)")
    +(mapping_buffer,"// GENERATED BY: CBModelTools")
    +(mapping_buffer,"// GENERATED ON: $(Dates.now())")
    +(mapping_buffer,"// SOURCE: https://github.com/varnerlab/CBModelTools")
    +(mapping_buffer,"")
    +(mapping_buffer,"// Reaction->gene mapping - ")
    +(mapping_buffer,"// record: reacton_tag={gene_id}")
    +(mapping_buffer,"// reaction_tag: from the rxns field of the COBRA mat file")
    +(mapping_buffer,"// gene_id: (kegg organism code):(gene location code)")
    +(mapping_buffer,"// --------------------------------------------------------- //")

    # get the list of reaction tags, and genes from the cobra dictionary -
    list_of_reaction_tags = cobra_dictionary["rxns"]
    list_of_genes = cobra_dictionary["genes"]

    # get the rxn gene mapping matrix -
    RGM = Matrix(cobra_dictionary["rxnGeneMat"])

    # What is the size of the system?
    (number_of_reactions, number_of_genes) = size(RGM)

    # main loop -
    for reaction_index = 1:number_of_reactions

        # what is the tag for this reaction?
        reaction_tag = list_of_reaction_tags[reaction_index]

        # initialize -
        record = ""
        record *= "$(reaction_tag)="

        # does this reaction have associated genes?
        idx_genes = findall(x->x==1,RGM[reaction_index,:])
        local_gene_set = Set{String}()
        if (!isempty(idx_genes))

            # ok, we have genes, grab them -
            gene_id_array = list_of_genes[idx_genes]

            # process each gene -
            for gene_id in gene_id_array

                # make the KEGG gene id -
                kegg_gene_id = gene_id
                if (occursin(".",gene_id) == true)
                    # need to cutoff the trailing *.1
                    kegg_gene_id = "$(kegg_organism_code):$(gene_id[1:end-2])"
                else
                    kegg_gene_id = "$(kegg_organism_code):$(gene_id)"
                end

                # cache -
                push!(local_gene_set,kegg_gene_id)
            end
        end

        if (isempty(local_gene_set) == false)

            # make an ec record -
            gene_record = ""
            for gene_number in local_gene_set
                gene_record*="$(gene_number),"
            end

            # remove trailing ,
            gene_record = gene_record[1:end-1]

            # add the record -
            record*="$(gene_record)"

            # push into buffer and go around again -
            +(mapping_buffer,record)
        end
    end

    # Write out the file -
    write_file_to_path(path_to_mapping_file, mapping_buffer)
end

function export_reaction_tag_to_ec_mapping_file(cobra_dictionary::Dict{String,Any}, kegg_organism_code::String, path_to_mapping_file::String)

    # Check organism code -
    is_kegg_organism_code_ok(kegg_organism_code)

    # Check the dictionary -
    is_cobra_dictionary_ok(cobra_dictionary)

    # initalize -
    mapping_buffer = String[]

    # add header text to mapping file -
    filename = splitdir(path_to_mapping_file)[2]
    +(mapping_buffer,"// --------------------------------------------------------- //")
    +(mapping_buffer,"// $(filename)")
    +(mapping_buffer,"// GENERATED BY: CBModelTools")
    +(mapping_buffer,"// GENERATED ON: $(Dates.now())")
    +(mapping_buffer,"// SOURCE: https://github.com/varnerlab/CBModelTools")
    +(mapping_buffer,"//")
    +(mapping_buffer,"// Reaction->ecnumber mapping - ")
    +(mapping_buffer,"// record: reacton_tag={ecnumber}")
    +(mapping_buffer,"// reaction_tag: from the rxns field of the COBRA mat file")
    +(mapping_buffer,"// ec_number: possible ecnumber estimated from KEGG")
    +(mapping_buffer,"// --------------------------------------------------------- //")


    # get the list of reaction tags, and genes from the cobra dictionary -
    list_of_reaction_tags = cobra_dictionary["rxns"]
    list_of_genes = cobra_dictionary["genes"]

    # get the rxn gene mapping matrix -
    RGM = Matrix(cobra_dictionary["rxnGeneMat"])

    # What is the size of the system?
    (number_of_reactions, number_of_genes) = size(RGM)

    # Declare a progress meter for user feedback -
    p = Progress(number_of_reactions,color=:yellow)

    # main loop -
    for reaction_index = 1:number_of_reactions

        # what is the tag for this reaction?
        reaction_tag = list_of_reaction_tags[reaction_index]

        # user message -
        msg = "Starting $(reaction_tag) ($(reaction_index) of $(number_of_reactions))"

        # update the progress bar -
        ProgressMeter.next!(p; showvalues = [(:status,msg)])

        # initialize -
        record = ""
        record *= "$(reaction_tag)="

        # does this reaction have associated genes?
        idx_genes = findall(x->x==1,RGM[reaction_index,:])

        # init -
        ec_record_set = Set{String}()
        if (!isempty(idx_genes))

            # ok, we have genes, grab them -
            gene_id_array = list_of_genes[idx_genes]

            # process each gene -
            for gene_id in gene_id_array

                # make the KEGG gene id -
                kegg_gene_id = gene_id
                if (occursin(".",gene_id) == true)
                    # need to cutoff the trailing *.1
                    kegg_gene_id = "$(kegg_organism_code):$(gene_id[1:end-2])"
                else
                    kegg_gene_id = "$(kegg_organism_code):$(gene_id)"
                end

                # lookup -
                local_ec_record_set = lookup_gene_ec_mapping_record(kegg_gene_id)
                if local_ec_record_set != nothing

                    # push into ec_record_set -
                    for ec_number in local_ec_record_set
                        push!(ec_record_set,ec_number)
                    end
                end
            end
        end

        if (isempty(ec_record_set) == false)

            # make an ec record -
            ec_record = ""
            for ec_number in ec_record_set
                ec_record*="$(ec_number),"
            end

            # remove trailing ,
            ec_record = ec_record[1:end-1]

            # add the record -
            record*="$(ec_record)"

            # push into buffer and go around again -
            +(mapping_buffer,record)
        end
    end

    # Write out the file -
    write_file_to_path(path_to_mapping_file,mapping_buffer)
end

function generate_vff_from_cobra_dictionary(cobra_dictionary::Dict{String,Any}, path_to_vff_file::String; path_to_reaction_to_ec_mapping_file::Union{String,Nothing}=nothing)

    # checks -
    is_dir_path_ok(path_to_vff_file)

    # initialize -
    vff_buffer = String[]

    # get the stoichiometric array, and some other stuff
    stoichiometric_matrix = Matrix(cobra_dictionary["S"])
    list_of_reaction_tags = cobra_dictionary["rxns"]
    list_of_species = cobra_dictionary["mets"]
    list_of_reversible_reactions = cobra_dictionary["rev"]

    # do we have a reaction_to_ec_mapping file?
    reaction_to_ec_mapping_dict = Dict{String,Mapping}()
    if (path_to_reaction_to_ec_mapping_file != nothing)

        # check path -
        is_file_path_ok(path_to_reaction_to_ec_mapping_file)

        # Ok, build the dictionary -
        reaction_to_ec_mapping_dict = build_mapping_dictionary(path_to_reaction_to_ec_mapping_file)
    end


    # Add a header -
    filename = splitdir(path_to_vff_file)[2]
    +(vff_buffer,"// --------------------------------------------------------- //")
    +(vff_buffer,"// $(filename)")
    +(vff_buffer,"// GENERATED BY: CBModelTools")
    +(vff_buffer,"// GENERATED ON: $(Dates.now())")
    +(vff_buffer,"// SOURCE: https://github.com/varnerlab/CBModelTools")
    +(vff_buffer,"// --------------------------------------------------------- //")
    +(vff_buffer,"")

    # rules section -
    +(vff_buffer,"#RULES::START ---------------------------------------------- //")
    +(vff_buffer,"#RULES::END ------------------------------------------------ //")

    # what is the size?
    (number_of_species,number_of_reactions) = size(stoichiometric_matrix)

    # Declare a progress meter for user feedback -
    p = Progress(number_of_reactions,color=:yellow)

    # write reactions -
    +(vff_buffer,"#REACTION::START ------------------------------------------- //")
    for reaction_index = 1:number_of_reactions

        # initialize empty buffer -
        line = ""

        # get the reaction tag -
        reaction_tag_string = list_of_reaction_tags[reaction_index]

        # user message -
        msg = "Completed $(reaction_tag_string) ($(reaction_index) of $(number_of_reactions))"

        # update the progress bar -
        ProgressMeter.next!(p; showvalues = [(:status,msg)])

        # add the tag to the buffer -
        line *= "$(reaction_tag_string),"

        # ok, so I need to check, do we have is reaction key in my ec mapping?
        if (haskey(reaction_to_ec_mapping_dict,reaction_tag_string) == true)

            # we have a reaction tag = ec number record
            mapping_record = reaction_to_ec_mapping_dict[reaction_tag_string]

            # get the set of values -
            value_set = mapping_record.value
            for ec_number in value_set
                line*="$(ec_number)::"
            end

            # add [], -
            line*="[],"
        else
            # We have no ecnumber information -
            line *= "[],"
        end

        # find the reactants -
        idx_reactants = findall(stoichiometric_matrix[:,reaction_index].<0.0)
        if (isempty(idx_reactants) == true)
            line *= "[],"
        else

            # how many species do we have?
            number_of_species = length(idx_reactants)
            counter = 1
            for index in idx_reactants

                # get the metabolite -
                metabolite_string = list_of_species[index]
                stcoeff = stoichiometric_matrix[index,reaction_index]

                if (stcoeff != -1.0)
                    # add data to the buffer -
                    line *= "$(abs(stcoeff))*$(metabolite_string)"
                else
                    # add data to the buffer -
                    line *= "$(metabolite_string)"
                end

                # do we have more?
                if (counter < number_of_species)
                    line *= "+"
                else
                    line *= ","
                end

                counter = counter + 1
            end
        end

        # find the products -
        idx_products = findall(stoichiometric_matrix[:,reaction_index].>0.0)
        if (isempty(idx_products) == true)
            line *= "[],"
        else

            # how many species do we have?
            number_of_species = length(idx_products)
            counter = 1
            for index in idx_products

                # get the metabolite -
                metabolite_string = list_of_species[index]
                stcoeff = stoichiometric_matrix[index,reaction_index]

                if (stcoeff != 1.0)
                    # add data to the buffer -
                    line *= "$(stcoeff)*$(metabolite_string)"
                else
                    # add data to the buffer -
                    line *= "$(metabolite_string)"
                end

                # do we have more?
                if (counter < number_of_species)
                    line *= "+"
                else
                    line *= ","
                end

                counter = counter + 1
            end
        end

        # is this reaction reversible?
        rev_value = list_of_reversible_reactions[reaction_index]
        if (rev_value == 1.0)
            line *= "-inf,inf"
        else
            line *= "0,inf"
        end

        # add buffer to list of strings -
        +(vff_buffer,line)
    end
    +(vff_buffer,"#REACTION::END --------------------------------------------- //")

    # Write out the vff file -
    open("$(path_to_vff_file)", "w") do f

        for line_item in vff_buffer
            write(f,"$(line_item)\n")
        end
    end
end
# ------------------------------------------------------------------------------ #
